@startuml

skinparam classAttributeIconSize 0

MissionLibrary --> Mission : 0..*
DroneDispatcher *-- MissionFlyer
MissionFlyer o-- Mission
DroneStatusStore --* MissionFlyer
DroneStatusStore --* DroneSimulator 
FastMission ..|> Mission
SlowMission ..|> Mission
VerboseFastMission ..|> Mission

class Menuer {
    +init(function_list)
    -_list_missions()
    -_load_missions()
    -_set_new_value()
    -_display_info()
    -_print_options()
    +display_menu()
}

class DroneDispatcher {
    -str _host 
    -num _port
    -tuple _drone
    -obj _socket
    +__init__(str host, num port)
    +__del__()
    -_send_message()
    +send_drone_on_mission(obj mission)
    +close_socket()
    +set_host()
    +set_port()
    +get_port()
    +set_port()
}

class DroneStatusStore {
    -last_status

    +get_latest_status
    +update_status
    +update_status_with_dict
    +get_status_dict

}

class MissionFlyer {
    
    -__init__(self, func func=None)
    +fly_mission(self, send_method)

}

class MissionLibrary {
    -_missions # a dict of mission objs
    -__init__(self, dict missions=None)
    -get_mission(self, str name)
    +get_mission_names()
    +add_missions()

}

class MissionFactory {

    +create_missions(self, mission_data)
    +create_missions_from_file(self, file_path)
    +_parse_py(self, py_data)
    +_parse_json(self, json_data)
    +_parse_csv(self, csv_data)

}

class Mission {
    -str _name
    +__init__(command_list)
    +execute(func send_method) # template method
    -_start(func send_method) # required method
    -_end(func send_method) # required method
    -_execute_commands(func send_method) #abstract
}

class FastMission {
    -_execute_commands(str command, func send_method)
}

class SlowMission {
    -_execute_commands(str command, func send_method)
}

class VerboseFastMission {
    -_execute_commands(str command, func send_method)
}

@enduml
